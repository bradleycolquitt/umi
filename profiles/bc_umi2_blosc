Timer unit: 1e-06 s

Total time: 96.9246 s
File: /home/brad/src/seq_utils/python/bc_umi2_comp.py
Function: main at line 19

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    19                                           def main():
    20                                           
    21                                               ## Align reads to genome using bowtie2
    22         1           22     22.0      0.0      if not os.path.exists(BAM):
    23                                                   print "Aligning..."
    24                                                   cmd_args = "bowtie2 -p 10 -x taeGut1 -U {0} -S {1}; process_sam.sh {1}".format(FASTQ, FASTQ.split(".")[0]+".sam")
    25                                                   print cmd_args
    26                                                   p = subprocess.Popen(cmd_args, shell=True)
    27                                                   p.wait()
    28                                           
    29                                               ## Load BC and UMI from fastq into HDF5
    30         2            3      1.5      0.0      for comp in COMPS:
    31         1           51     51.0      0.0          print "Testing " + comp
    32         1            3      3.0      0.0          h5 = "_".join([H5, comp]) + ".h5"
    33         1           16     16.0      0.0          if not os.path.exists(h5):
    34         1        59149  59149.0      0.1              ex = bc.extracter(FASTQ, h5, comp)
    35         1      3438467 3438467.0      3.5              ret = ex.read_fastq()
    36         1          577    577.0      0.0              ex.h5.close()
    37                                           
    38                                           
    39                                           
    40                                                   ## Update HDF5 with read aligned chrom and pos using read name as key
    41         1         1087   1087.0      0.0          hap1 = hap.bam_h5(BAM, h5)
    42         1           22     22.0      0.0          print "Indexing read column, create_index()..."
    43         1        28840  28840.0      0.0          hap1.h5.root.data.cols.name.create_index()
    44         1           19     19.0      0.0          print "update()..."
    45         1     32068451 32068451.0     33.1          hap1.update()
    46                                           
    47         1          888    888.0      0.0          hap1.h5.root.data.cols.name.remove_index()
    48         1           20     20.0      0.0          print "Indexing read column, create_csindex()..."
    49         1        21615  21615.0      0.0          hap1.h5.root.data.cols.name.create_csindex()
    50         1           27     27.0      0.0          print "update()..."
    51         1     30487895 30487895.0     31.5          hap1.update()
    52                                           
    53         1           20     20.0      0.0          print "Copying and sorting table..."
    54         1        88825  88825.0      0.1          hap1.h5.root.data.copy("/", "data2", sortby='name', propindexes=True)
    55         1         7680   7680.0      0.0          hap1.h5.move_node("/", newname="data", name="data2", overwrite=True)
    56                                           
    57         1           18     18.0      0.0          print "update()..."
    58         1     30720883 30720883.0     31.7          hap1.update()